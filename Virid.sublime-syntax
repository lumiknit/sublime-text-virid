%YAML 1.2
---
name: Virid
file_extensions: [vrd, virid]
scope: source.virid
variables:
  white: "[ \t\n\r]"
  num: '[0-9]'
  opc: '[\-<>+*/%!^=&|;]'
  nopc: '[^\-<>+*/%!^=&|;]'
  op: '{{opc}}+'
  sep_w: "[\\-<>+@*/%!^=&|\\[\\](){},.:;?'\"\\\\$~`#]"
  sep: "[ \t\n\r\\-<>+@*/%!^=&|\\[\\](){},.:;?'\"\\\\$~`#]"
  namec: "[^ \t\n\r\\-<>+@*/%!^=&|\\[\\](){},.:;?'\"\\\\$~`#]"
  name: "{{namec}}+"
  g_name: '({{name}}\.)*{{name}}'
  m_name: '({{name}}[.:])*{{name}}'
  g_op_or_name: '({{name}}\.)*({{name}}|{{op}})'
  op_or_name: '({{name}}[.:])*({{name}}|{{op}})'

contexts:
  main:
    - include: global_block

  # Block
  global_block:
    - include: block_e
    - match: "(?=.)"
      push: line
  block:
    - include: block_e
    - match: "(?=.)"
      set: line
  block_e:
    - meta_scope: meta.block.virid
    - include: whitespace
    - include: comments
    - include: annotation
    - match: "(?=[^$@#]*(?<!{{opc}})::(?!{{opc}}))"
      push:
        - meta_scope: meta.lhs.name.virid
        - match: '\.'
          scope: punctuation.accessor.virid
          push: type_name
        - match: (?={{namec}})
          push: type_name
        - match: (?=.)
          set: type_args
    - match: "[ \t]*({{g_name}})\\s*(:?=)(?!{{opc}})"
      captures:
        1: variable.virid
        3: keyword.operator.virid
    - match: "(?=[^$@#]*(?<!{{opc}}):?=(?!{{opc}}))"
      push:
        - meta_scope: meta.lhs.name.virid
        - match: '\('
          scope: punctuation.section.group.begin.virid
          push:
            - match: '\)'
              scope: punctuation.section.group.end.virid
              set: fn_args
            - match: ':'
              scope: punctuation.separator.type.virid
              push: type_notation
            - match: (?={{namec}})
              push: fn_name
        - match: (?={{namec}})
          push: fn_name
        - match: (?=.)
          set: fn_args

  type_args:
    - include: comments
    - meta_scope: meta.type.args.virid
    - match: "::(?!{{opc}})"
      scope: keyword.operator.virid
      set: type_block
    - match: (?={{namec}})
      push: argument
  fn_args:
    - include: comments
    - meta_scope: meta.function.args.virid
    - match: ":?=(?!{{opc}})"
      scope: keyword.operator.virid
      pop: true
    - match: '\('
      scope: punctuation.section.group.begin.virid
      push:
        - match: '\)'
          scope: punctuation.section.group.end.virid
          pop: true
        - match: ':'
          scope: punctuation.separator.type.virid
          push: type_notation
        - match: (?={{namec}})
          push: argument
    - match: (?={{namec}})
      push: argument

  line:
    - include: comments
    - meta_scope: meta.line.virid
    - match: "[ \t]*`[ \t]*\n"
      scope: punctuation.terminator.virid
    - match: "[ \t]*$"
      scope: meta.linebreak.virid
      pop: true
    - include: match
    - include: lambda
    - include: whitespace
    - include: operator
    - include: constants

  type_notation:
    - meta_scope: meta.type.virid
    - match: '_?[0-9]+'
      scope: constant.language.generic.virid
    - match: "\\("
      scope: punctuation.section.group.begin.virid
      push:
        - match: "\\)"
          scope: punctuation.section.group.end.virid
          pop: true
        - include: type_notation
    - match: (?={{namec}})
      push: type_name
    - match: "`[ \t]*\n"
      scope: punctuation.join.virid
    - match: (?![ \t])
      pop: true

  type_block:
    - meta_scope: meta.type.block.virid
    - match: '\|[ \t\r\n,`]*'
      scope: keyword.control.virid
      push: type_line_first
    - match: '\\[ \t\r\n,`]*'
      scope: keyword.control.virid
      set: type_line_first
  type_line_first:
    - meta_scope: meta.type.line.first.virid
    - match: '\.'
      scope: punctuation.accessor.virid
    - match: \s*$
      set: type_line
    - match: (?={{namec}})
      push: fn_name
    - match: "[ \t]*`[ \t]*\n"
      scope: punctuation.join.virid
      set: type_line
    - match: "[ \t]*`[ \t]*"
      scope: punctuation.join.virid
      set: type_line
    - match: (?=.)
      set: type_line
  type_line:
    - meta_scope: meta.type.line.virid
    - match: '\('
      scope: punctuation.section.group.begin.virid
      push:
        - match: '\)'
          scope: punctuation.section.group.end.virid
          pop: true
        - include: type_notation
    - match: (?={{namec}})
      push: type_name
    - match: "[ \t]*`[ \t]*\n"
      scope: punctuation.join.virid
    - match: (?![ \t])
      pop: true

  lambda:
    - match: '\$'
      scope: keyword.control.virid
      push: fn_args

  match:
    - match: '\?'
      scope: keyword.control.virid, keyword.operator.virid
    - match: '(\||\\)(?!{{opc}})'
      scope: keyword.control.virid, keyword.operator.virid
      push:
        - match: '=>'
          scope: keyword.control.virid, keyword.operator.virid
          pop: true
        - include: line
    - match: '\\>(?!{{opc}})'
      scope: keyword.control.virid, keyword.operator.virid

  # Annotaiton
  annotation:
    - match: '@@'
      scope: keyword.control.preprocessor.virid
      push:
        - meta_scope: meta.module.virid
        - include: whitespace
        - match: (?={{name}})
          set: module_name
    - match: '@'
      scope: keyword.control.preprocessor.virid
      push:
        - meta_scope: meta.module.virid
        - include: whitespace
        - match: '"'
          scope: punctuation.definition.string.begin.virid
          set: double_quoted_string
        - match: '='
          scope: keyword.control.preprocessor.virid
          set: module_name
        - match: '(?={{namec}})'
          push: module_name
  module_name:
    - meta_scope: meta.name.virid
    - match: ({{name}})(\.)(?={{name}})
      captures:
        1: entity.name.namespace.virid
        2: punctuation.accessor.virid
    - match: '{{name}}'
      scope: entity.name.namespace.virid
      pop: true

  comments:
    - match: '#{'
      scope: punctuation.definition.comment.begin.virid
      push:
        - meta_scope: comment.block.virid
        - match: '}'
          scope: punctuation.definition.comment.end.virid
          pop: true
    - match: '#'
      scope: punctuation.definition.comment.line.virid
      push:
        - meta_scope: comment.line.virid
        - match: $
          pop: true

  whitespace:
    - match: '\s*$'
      scope: meta.linebreak.virid
    - match: '\s+'
      scope: meta.blank.virid

  constants:
    - match: "'"
      scope: punctuation.definition.string.begin.virid
      push: quoted_string
    - match: '"'
      scope: punctuation.definition.string.begin.virid
      push: double_quoted_string
    # Base
    - match: -?0x[0-9a-fA-F]+
      scope: constant.numeric.hex.virid
    - match: -?0o[0-7]+
      scope: constant.numeric.oct.virid
    - match: -?0q[0-3]+
      scope: constant.numeric.qud.virid
    - match: -?0b[01]+
      scope: constant.numeric.bin.virid
    # Float
    - match: -?[0-9]+\.[0-9]+
      scope: constant.numeric.virid
    # Integer
    - match: -?[0-9]+
      scope: constant.numeric.virid
  quoted_string:
    - meta_scope: string.quoted.single.virid
      match: \\.
      scope: constant.character.escape.virid
    - match: "'"
      scope: punctuation.definition.string.end.virid
      pop: true
  double_quoted_string:
    - meta_scope: string.quoted.double.virid
      match: \\.
      scope: constant.character.escape.virid
    - match: '"'
      scope: punctuation.definition.string.end.virid
      pop: true

  type_name:
    - meta_scope: meta.name.virid
    - match: ({{name}})(\.)(?={{name}})
      captures:
        1: entity.name.namespace.virid
        2: punctuation.accessor.virid
    - match: '{{name}}'
      scope: storage.type.virid
      pop: true
  fn_name:
    - meta_scope: meta.name.virid
    - match: ({{name}})(\.)(?={{name}})
      captures:
        1: entity.name.namespace.virid
        2: punctuation.accessor.virid
    - match: '{{name}}'
      scope: entity.name.function.virid
      pop: true
  var_name:
    - meta_scope: meta.name.virid
    - match: ({{name}})(\.)(?={{name}})
      captures:
        1: entity.name.namespace.virid
        2: punctuation.accessor.virid
    - match: '{{name}}'
      scope: variable.virid
      pop: true
  name:
    - match: (?={{m_name}})
      push:
        - meta_scope: meta.name.virid
        - match: ({{name}})([.:])(?={{name}})
          captures:
            1: entity.name.namespace.virid
            2: punctuation.accessor.virid
        - match: '({{name}})(\[)'
          captures:
            1: entity.name.virid
            2: punctuation.accessor.virid
          push:
            - match: (?=\]\[|[^\]])
              push:
              - match: \]\[
                scope: punctuation.accessor.virid
              - match: (?=\])
                scope: punctuation.accessor.virid
                pop: true
              - include: local
            - match: \]
              scope: punctuation.accessor.virid
              pop: true
        - match: '{{name}}'
          scope: entity.name.virid
          pop: true
  operator:
    - match: '{{op}}'
      scope: keyword.operator.virid
  argument:
    - meta_scope: meta.name.virid
    - match: '({{name}}\.)*({{name}})'
      scope: variable.parameter.virid
      pop: true