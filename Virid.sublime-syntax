%YAML 1.2
---
name: Virid
file_extensions: [vrd, virid]
scope: source.virid
variables:
  num: '[0-9]'
  opc: '[\-<>+*/%!^=&|~]'
  op: '{{opc}}+'
  sep: "[ \t\n\r\\-<>+*/%!^=&|\\[\\](){},.:;?'\"\\\\$~`#]"
  name: "[^ \t\n\r\\-<>+*/%!^=&|\\[\\](){},.:;?'\"\\\\$~`#]+"
  m_name: '\$?({{name}}\.)*{{name}}'
  op_or_name: '\$?({{name}}\.)*({{name}}|{{op}})'

contexts:
  main:
    - include: global

  global:
    - include: preprocessor
    - include: comments
    - include: global_definition



  type_local:
    - match: \.
      scope: punctuation.terminator.virid
      pop: true
    - match: ','
      scope: punctuation.terminator.virid
    - include: comments
    - include: type_local_item
  type_local_item:
    - match: '\['
      scope: punctuation.section.list.begin.virid
      push:
        - meta_scope: meta.list.virid
        - match: '\]'
          scope: punctuation.section.list.end.virid
          pop: true
        - include: type_local_item
    - match: '\('
      scope: punctuation.section.args.begin.virid
      push:
        - meta_scope: meta.args.virid
        - match: ','
          scope: punctuation.separator.virid
        - match: '\)'
          scope: punctuation.section.args.end.virid
          pop: true
        - include: type_local_item
    - include: type_name

  global_type_n:
    - include: global_type_n1
  global_type_n1:
    - match: (?={{m_name}}\s*:)
      set: global_type_n2
  global_type_n2:
    - match: (?=:)
      set: global_type_n3
    - meta_scope: meta.definition.type.virid
    - include: type_name
  global_type_n3:
    - match: ':'
      scope: punctuation.separator.virid
      set: type_local

  global_type_a:
    - include: global_type_a1
  global_type_a1:
    - match: (?={{m_name}}\s*\(.*?\)\s*:)
      set: global_type_a2
  global_type_a2:
    - match: (?=\()
      set: global_type_a3
    - meta_scope: meta.definition.type.virid
    - include: type_name
  global_type_a3:
    - match: \(
      scope: punctuation.section.args.begin.virid
      set: global_type_a4
  global_type_a4:
    - match: (\))\s*(:)
      captures:
        1: punctuation.section.args.end.virid
        2: punctuation.separator.virid
      set: type_local
    - match: ','
      scope: punctuation.separator.virid
    - include: argument

  global_value:
    - include: global_value1
  global_value1:
    - match: (?={{m_name}}\s*=)
      set: global_value2
  global_value2:
    - match: (?==)
      set: global_value3
    - meta_scope: meta.definition.value.virid
    - include: name
  global_value3:
    - match: '='
      scope: punctuation.separator.virid
      set: local

  global_fn:
    - include: global_fn1
  global_fn1:
    - match: (?={{op_or_name}}\s*\()
      set: global_fn2
  global_fn2:
    - match: (?=\()
      set: global_fn3
    - meta_scope: meta.definition.function.virid
    - include: def_name
  global_fn3:
    - match: '\('
      scope: punctuation.section.args.begin.virid
      set: global_fn4
  global_fn4:
    - match: '\)'
      scope: punctuation.section.args.end.virid
      set: local
    - match: ','
      scope: punctuation.separator.virid
    - match: (?={{m_name}}\s*:)
      push:
        - match: ':'
          scope: punctuation.separator.virid
          set: fn_arg_type
        - include: argument
    - include: argument
  fn_arg_type:
    - match: (?=\)|,)
      pop: true
    - match: '\['
      scope: punctuation.section.list.begin.virid
      push:
        - meta_scope: meta.list.virid
        - match: '\]'
          scope: punctuation.section.list.end.virid
          pop: true
        - include: fn_arg_type
    - match: '\('
      scope: punctuation.section.args.begin.virid
      push:
        - meta_scope: meta.args.virid
        - match: ','
          scope: punctuation.separator.virid
        - match: '\)'
          scope: punctuation.section.args.end.virid
          pop: true
        - include: fn_arg_type
    - include: type_name

  global_definition:
    - match: (?={{m_name}})
      push:
        - include: global_type_n
        - include: global_type_a
        - include: global_value
        - include: global_fn
        - match: (?=.?)
          pop: true
    - match: (?={{op_or_name}})
      push:
        - include: global_fn

  preprocessor:
    - match: '#_'
      scope: keyword.control.preprocessor.begin.virid
      push:
        - match: '\.'
          scope: keyword.control.preprocessor.end.virid
          pop: true
        - match: '"'
          scope: punctuation.definition.string.begin.virid
          push:
            - meta_scope: string.quoted.filename.virid
            - match: \\.
              scope: constant.character.escape.virid
            - match: '"'
              scope: punctuation.definition.string.end.virid
              pop: true
        - match: '\('
          scope: punctuation.section.begin.virid
          push:
            - meta_scope: meta.preprocessor.module.virid
            - match: '\)'
              scope: punctuation.section.end.virid
              pop: true
            - include: module_name
        - include: module_name
        

  comments:
    - match: '#{'
      scope: punctuation.definition.comment.begin.virid
      push:
        - meta_scope: comment.block.virid
        - match: '}'
          scope: punctuation.definition.comment.end.virid
          pop: true
    - match: '#'
      scope: .virid
      push:
        - meta_scope: comment.line.virid
        - match: $
          pop: true


  local:
    - match: \.
      scope: punctuation.terminator.virid
      pop: true
    - include: local_expr
  local_expr:
    - match: ','
      scope: punctuation.terminator.virid
    - include: comments
    - include: constants
    - include: lambda
    - include: pattern_matching
    - include: conditional
    - include: local_paren
    - include: local_list
    - include: name
    - include: operator

  block_local:
    - match: '[.;]'
      scope: punctuation.terminator.virid
      pop: true
    - include: local_expr

  lambda:
    - match: '(\\)(\()'
      captures:
        1: keyword.operator.virid
        2: punctuation.section.args.begin.virid
      push:
        - match: '\)'
          scope: punctuation.section.args.end.virid
          set: local
        - match: (?={{m_name}}\s*:)
          push:
            - match: ':'
              scope: punctuation.separator.virid
              set: fn_arg_type
            - include: argument
        - include: argument

  pattern_matching:
    - match: '=>>'
      scope: keyword.control.virid, punctuation.separator.virid
    - match: '\|=>(?!opc)'
      scope: keyword.control.virid, punctuation.separator.virid
      push: block_local
    - match: '\|(?!opc)'
      scope: keyword.control.virid, punctuation.separator.virid
      push:
        - match: '=>(?!opc)'
          scope: keyword.control.virid, punctuation.separator.virid
          set: block_local
        - include: local_expr

  conditional:
    - match: '\?'
      scope: keyword.control.virid, punctuation.separator.virid
      push:
        - match: ':'
          scope: punctuation.separator.virid
          set:
            - include: block_local
        - include: block_local


  local_paren:
    - match: '\('
      scope: punctuation.section.paren.begin.virid
      push:
        - match: '\)'
          scope: punctuation.section.paren.end.virid
          pop: true
        - include: local_expr
  local_list:
    - match: '\['
      scope: punctuation.section.list.begin.virid
      push:
        - match: '\]'
          scope: punctuation.section.list.end.virid
          pop: true
        - include: local_expr

  constants:
    - match: "'"
      scope: punctuation.definition.string.begin.virid
      push: quoted_string
    - match: '"'
      scope: punctuation.definition.string.begin.virid
      push: double_quoted_string
    # Base
    - match: -?0x[0-9a-fA-F]+
      scope: constant.numeric.hex.virid
    - match: -?0o[0-7]+
      scope: constant.numeric.oct.virid
    - match: -?0q[0-3]+
      scope: constant.numeric.qud.virid
    - match: -?0b[01]+
      scope: constant.numeric.bin.virid
    # Float
    - match: -?[0-9]+\.[0-9]+
      scope: constant.numeric.virid
    # Integer
    - match: -?[0-9]+
      scope: constant.numeric.virid
  quoted_string:
    - meta_scope: string.quoted.single.virid
      match: \\.
      scope: constant.character.escape.virid
    - match: "'"
      scope: punctuation.definition.string.end.virid
      pop: true
  double_quoted_string:
    - meta_scope: string.quoted.double.virid
      match: \\.
      scope: constant.character.escape.virid
    - match: '"'
      scope: punctuation.definition.string.end.virid
      pop: true

  module_name:
    - match: (?={{m_name}})
      push:
        - meta_scope: meta.name.virid
        - match: \$
          scope: entity.name.namespace.virid
        - match: ({{name}})(\.)(?={{name}})
          captures:
            1: entity.name.namespace.virid
            2: punctuation.accessor.virid
        - match: '{{name}}'
          scope: entity.name.namespace.virid
          pop: true
  type_name:
    - match: (?={{m_name}})
      push:
        - meta_scope: meta.name.virid
        - match: '\$'
          scope: entity.name.namespace.virid
        - match: ({{name}})(\.)(?={{name}})
          captures:
            1: entity.name.namespace.virid
            2: punctuation.accessor.virid
        - match: '{{name}}'
          scope: storage.type.virid
          pop: true
  def_name:
    - match: (?={{op_or_name}})
      push:
        - meta_scope: meta.name.def.virid
        - match: '\$'
          scope: entity.name.namespace.virid
        - match: ({{name}})(\.)(?={{name}}|{{op}})
          captures:
            1: entity.name.namespace.virid
            2: punctuation.accessor.virid
        - match: '{{name}}'
          scope: entity.name.virid
          pop: true
        - match: '{{op}}'
          scope: keyword.operator.virid
          pop: true
  name:
    - match: (?={{m_name}})
      push:
        - meta_scope: meta.name.virid
        - match: '\$'
          scope: entity.name.namespace.virid
        - match: ({{name}})(\.)(?={{name}})
          captures:
            1: entity.name.namespace.virid
            2: punctuation.accessor.virid
        - match: '{{name}}'
          scope: entity.name.virid
          pop: true
  operator:
    - match: '{{op}}'
      scope: keyword.operator.virid
  argument:
    - match: '{{name}}'
      scope: variable.parameter.virid


